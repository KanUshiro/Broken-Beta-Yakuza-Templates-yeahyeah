#include "../../Common/includes/include.h"
enum<int32> type{
Chapter = 0,
Branch_Events = 4,
Scenario = 5,};

    enum<uint16>category{
    BGM = 1,
    Caption = 3,
    Cutscene_04 = 4,
    Results = 5,
    Effects = 8,
    Cutscene_14 = 14,
    Equip = 16 ,
    Start_Auth = 19,
    State_Progress = 31,
    State_Enum_Unk = 32,
    Timer = 33,
    Follow_Up = 34,
    Cutscene_39 = 39,
    Player_Intro = 43,
    Movie_Name = 46,
    };

    enum<uint16>categoryOOE{
    Cutscene_0_OOE = 0,
    BGM_OOE = 1,
    Enemy_Dispose_OOE = 3,
    Camera_Start_OOE = 4 ,
    Movie_Name_OOE = 14,
    Cutscene_27_OOE = 27,
    };

enum<uint32>followcategory{

Scenario2_Node=0,

};

enum<uint32>toggle{
False=0,
True=1,
};

void Setting(int32 Pointer, int32 Size, int u){
    local int z;
    for(z=FTell();z<Pointer+Size*4;z=FTell()){
        struct Settings{
            u++;
            //SetRandomBackColor();
            int16 ScenSetting<format=hex,name="Settings Node",comment="Indicates the start of a setting">;
            if(Version<2){
                category Category<name="Category">;
            }
            else{
                categoryOOE Category<name="Category">;
            };
            local char SetRead[];
            if(Version<2){
            switch (Category){
                case 1:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strBGM[]<name="BGM">;
                    SetRead=strBGM;
                    FSeek(stay);
                    break;
                case 3:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strCAP[]<name="Caption Name">;
                    SetRead=strCAP;
                    FSeek(stay);
                    break;
                case 4:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strCTS[]<name="Cutscene">;
                    SetRead=strCTS;
                    FSeek(stay);
                    break;
                case 5://y5 only
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strHRK[]<name="Results">;
                    SetRead=strHRK;
                    FSeek(stay);
                    break;
                case 8:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strPTC[]<name="Effect(s) Loaded",comment="effect/ptc_arc_w64/*.par">;
                    SetRead=strPTC;
                    FSeek(stay);
                    break;
                case 14:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strCTS[]<name="Cutscene">;
                    SetRead=strCTS;
                    FSeek(stay);
                    break;
                case 16:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strWEP[]<name="Equip Name",comment="Hardcoded, ends up leading to boot/item_alias.bin">;
                    SetRead=strWEP;
                    FSeek(stay);
                    break;
                case 19:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strAUTH[]<name="Hact Name">;
                    SetRead=strAUTH;
                    FSeek(stay);
                    break;
                case 31:
                    u16 Chapter_State_ID<name="Chapter State ID">;
                    u16 Scenario_State_ID<name="Scenario State ID">;
                    toggle Complete<name="Complete">;
                    break;
                case 32:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strSTA[]<name="Scenario State UnkString">;
                    SetRead=strSTA;
                    FSeek(stay);
                    u32 Unk1;
                    u32 Unk2;
                    break;
                case 33:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strSTA[]<name="Scenario State Timer">;
                    SetRead=strSTA;
                    FSeek(stay);
                    u32 Unk1;
                    u32 Unk2;
                    break;
                case 34:
                    u16 Chapter_State_Cond<name="Chapter State ID",comment="Followup will trigger on condition completion">;
                    u16 Scenario_State_Cond<name="Scenario State ID",comment="Followup will trigger on condition completion">;
                    followcategory FollowType<name="Follow Setting Type // Probably wrong">;
                    switch(FollowType){
                        case 0:
                            u32 NodeID<format=hex,name="Next Node ID">;
                            break;
                        default:
                            u32 Unk<format=hex>;
                            break;
                    };
                    break;
                case 37:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strCTS[]<name="Movie Name">;
                    SetRead=strCTS;
                    FSeek(stay);
                    break;
                case 39:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strCTS[]<name="Cutscene">;
                    SetRead=strCTS;
                    FSeek(stay);
                    break;
                case 43:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strGMT[]<name="Animation Name">;
                    SetRead=strGMT;
                    FSeek(stay);
                    break;
                case 46:
                    u32 Pointer<format=hex,name="String Pointer">;
                    local int stay=FTell();
                    FSeek(Pointer);
                    char strCTS[]<name="Movie Name">;
                    SetRead=strCTS;
                    FSeek(stay);
                    if(ReadUShort() == 0x8000){
                        break; //y0
                    };
                    u32 Pointer2<format=hex,name="String 2 Pointer">;
                    FSeek(Pointer2);
                    char strCTS2[]<name="Movie Name 2">;
                    FSeek(stay+4);
                    u32 Unused<hidden=true>;
                    u32 Pointer3<format=hex,name="String 3 Pointer">;
                    FSeek(Pointer3);
                    char strCTS3[]<name="Movie Name 3">; //k1
                    FSeek(stay+12);
                    SetRead=strCTS3;
                    break;
                default:
                    local int i;
                    local int t;
                    for(i=0;i>-1;i++){
                        t=FTell();
                        if(ReadUShort() == 0x8000||t>header.ScenarioPointer+header.ScenarioCount*4){
                            break;
                        };
                        u32 Unk;
                    };
                };
                }
                else{
                    switch(Category){
                        case 0:
                            u32 Unk;
                            u32 StringPointer<format=hex,name="String Pointer">;
                            local int usman=FTell();
                            FSeek(StringPointer);
                            char Str[]<name="Cutscene">;
                            FSeek(usman);
                            SetRead=Str;
                            break;
                        case 1:
                            u32 Pointer<format=hex,name="String Pointer">;
                            local int stay=FTell();
                            FSeek(Pointer);
                            char strBGM[]<name="BGM">;
                            SetRead=strBGM;
                            FSeek(stay);
                            break;
                        case 3:
                            u32 Pointer<format=hex,name="String Pointer">;
                            local int usman=FTell();
                            FSeek(Pointer);
                            char Str[]<name="Enemy Dispose">;
                            FSeek(usman);
                            SetRead=Str;
                            break;
                        case 4:
                            u32 Pointer<format=hex,name="String Pointer">;
                            local int usman=FTell();
                            FSeek(Pointer);
                            char Str[]<name="Camera Name">;
                            FSeek(usman);
                            SetRead=Str;
                            break;
                        case 13:
                            u32 Pointer<format=hex,name="String Pointer">;
                            local int usman=FTell();
                            FSeek(Pointer);
                            char Str[]<name="Movie Name">;
                            FSeek(usman);
                            SetRead=Str;
                            break;
                        case 20:
                            u32 Pointer<format=hex,name="String Pointer">;
                            local int usman=FTell();
                            FSeek(Pointer);
                            char Str[]<name="Unk">;
                            FSeek(usman);
                            SetRead=Str;
                            break;
                        case 27:
                            u32 Pointer<format=hex,name="String Pointer">;
                            local int usman=FTell();
                            FSeek(Pointer);
                            char Str[]<name="Cutscene">;
                            FSeek(usman);
                            SetRead=Str;
                            break;
                        case 32:
                            u32 Pointer<format=hex,name="String Pointer">;
                            local int usman=FTell();
                            FSeek(Pointer);
                            char Str[]<name="Unk">;
                            FSeek(usman);
                            SetRead=Str;
                            break;
                        case 37:
                            u32 Pointer<format=hex,name="String Pointer">;
                            local int usman=FTell();
                            FSeek(Pointer);
                            char Str[]<name="Unk">;
                            FSeek(usman);
                            SetRead=Str;
                            break;
                        case 42:
                            u32 GameMode<name="Game Mode (unsure)">;
                            u32 Pointer<format=hex,name="String Pointer">;
                            local int usman=FTell();
                            FSeek(Pointer);
                            char Str[]<name="Unk">;
                            FSeek(usman);
                            SetRead=Str;
                            break;
                        case 43:
                            u32 GameMode<name="Game Mode (unsure)">;
                            u32 Pointer<format=hex,name="String Pointer">;
                            local int usman=FTell();
                            FSeek(Pointer);
                            char Str[]<name="Unk">;
                            FSeek(usman);
                            SetRead=Str;
                            break;
                        default:
                            local int i;
                            local int t;
                            for(i=0;i>-1;i++){
                                t=FTell();
                                if(ReadUShort() == 0x8000||t>=header.UnkPointer){
                                    break;
                                };
                                u32 Unk;
                            };
                    };
                };
        }settings<name=NameSettings,read=SetRead>;
    };
}

string NameSettings(Settings &r)
{
    if(Version<2){
        switch (r.Category)
        {
            case 1:
                return "BGM";
            case 3:
                return "Title Card";
            case 4:
                return "Cutscene Unk";
            case 5:
                return "Results"; //y5
            case 8:
                return "Effects";
            case 14:
                return "Cutscene Unk";
            case 16:
                return "Equipment";
            case 19:
                return "Dynamic Intro";
            case 31:
                return "Scenario State Progress";
            case 32:
                return "State Enums?";
            case 33:
                return "Timer";
            case 34:
                return "Node Followup Settings";
            case 37:
                return "Cutscene Replay Name"; //ishin
            case 39:
                return "Cutscene Unk";
            case 43:
                return "Player Intro";
            case 46:
                return "Cutscene Replay Name";
            default:
                return "";
        };
    }
    else{
        switch (r.Category)
        {
            case 0:
                return "Cutscene?";
            case 1:
                return "BGM";
            case 3:
                return "Enemy Dispose";
            case 4:
                return "Battle Start Camera";
            case 14:
                return "Cutscene Replay Name";
            case 20:
                return "Might be Effect";
            case 27:
                return "Cutscene?";
            default:
                return "Setting";
        };
    };
};

void Chapter(int c, uint ChapterSum, uint ScenarioSum){
    struct Part4Node{
                    SetRandomBackColor();
                    if(Version<2){
                        type NodeType<name="Node Type">;
                    }
                    else{
                        local int32 NodeType=0;
                    };
                    local int stay4=FTell();
                    if (NodeType==0)
                        {
                            int32 StringPointer<format=hex,name="String Pointer">;
                            FSeek(StringPointer);
                            struct NodeString{
                                char String[];
                            }str<name="String",read=String>;
                            local char die[]=str.String;
                            ChapterSum++;
                            local uint ChapterIndex=ChapterSum;
                            ScenarioSum=-1;
                            FSeek(stay4+4);
                            if(Version<2){
                                struct Inception{
                                    int32 Pointer2<format=hex>;
                                    local int RggsWhy;
                                    if(Version==1){
                                        RggsWhy = (Pointer2 - header.Part4Pointer)/32;
                                    }
                                    else{
                                        RggsWhy = (Pointer2 - header.Part4Pointer)/48;
                                    };
                                }inception<name="Follows up to",read=ReadInception>;
                                struct Inception2{
                                    int32 Pointer2<format=hex>;
                                    local int RggsWhy;
                                    if(Version==1){
                                        RggsWhy = (Pointer2 - header.Part4Pointer)/32;
                                    }
                                    else{
                                        RggsWhy = (Pointer2 - header.Part4Pointer)/48;
                                    };
                                }inception2<name="Next chapter",read=ReadInception2>;
                            int32 UnkFirst<hidden=true>;//likely unused. look for an exception.
                            }
                            else{
                                int32 P2Pointer<format=hex,name="Scenario Pointer">;
                                int32 ScenarioCount<name="Scenario Count">;
                                int32 CategoryID<name="Category ID">;
                                int32 Unk;
                                int32 ScenarioCountAgainIThink<name="Scenario Count">;
                                local int colt=FTell();
                                FSeek(P2Pointer);
                                struct Y4P2{
                                    local int gay;
                                    for(gay=0;gay<part4node.ScenarioCount;gay++){
                                        struct Y4Scenario{
                                            SetRandomBackColor();
                                            int32 Unk;
                                            int32 StringPointer<format=hex,name="String Pointer 1">;
                                            int32 GameMode<name="Game Mode">;
                                            int32 StringPointer2<format=hex,name="String Pointer 2">;
                                            int32 NodeID<format=hex,name="Scenario ID">;
                                            int32 ScenSettingsPointer<format=hex,name="Settings Pointer 1">;
                                            int32 ScenSettingsCount<name="Settings Length 1">;
                                            int32 Unks[3];
                                            int32 ScenSettingsPointer2<format=hex,name="Settings Pointer 2">;
                                            int32 ScenSettingsCount2<name="Settings Length 2">;
                                            local int notgay=FTell();
                                            local int u=0;
                                            if(ScenSettingsCount>0){
                                                FSeek(ScenSettingsPointer);
                                                struct SettingsY4{
                                                    Setting(ScenSettingsPointer,ScenSettingsCount,u);
                                                }settingsy4<name="Settings 1">;
                                            };
                                            if(ScenSettingsCount2>0){
                                                FSeek(ScenSettingsPointer2);
                                                struct SettingsY42{
                                                    Setting(ScenSettingsPointer2,ScenSettingsCount2,u);
                                                }settingsy42<name="Settings 2">;
                                            };
                                            if(StringPointer>0){
                                                FSeek(StringPointer);
                                                char String[]<name="String 1">;
                                            };
                                            if(StringPointer2>0){
                                                FSeek(StringPointer2);
                                                char String2[]<name="String 2">;
                                            };
                                            FSeek(notgay);
                                        }y4scen<read=ReadEng,name="Scenario">;
                                    };
                                }y4p2<name="Scenarios">;
                                FSeek(colt);
                            };
                            int32 NodeID<name="Chapter ID",format=hex>;
                            int32 Unksdfssdf<hidden=true>;
                            if(Version==0){
                                int32 Yknlkvlnk<hidden=true>;
                                int32 Unk;
                                int32 UnkThird[3]<hidden=true>;
                            }
                            else if(Version==1){
                                int32 Yknlkvlnk<hidden=true>;
                            };
                            
                        }
                    else if(NodeType==4){//y5 only - XOR
                        u32 Part6Pointer<format=hex,name="Branch Events Structure Pointer">;
                        struct HarukaFollow{
                            int32 Pointer2<format=hex>;
                            local int RggsWhy = (Pointer2 - header.Part4Pointer)/32;
                        }harukafollow<name="Follows up to",read=ReadHarukaF>;
                        struct HarukaChapter{
                            int32 Pointer2<format=hex>;
                            local int RggsWhy= (Pointer2 - header.Part4Pointer)/32;
                        }harukachapter<name="Next normal node",read=ReadHarukaC>;
                        struct HarukaChild{
                                int32 ParentPointer<format=hex>;
                                local int RggsWhy = (ParentPointer - header.Part4Pointer)/32;
                        }harukachild<name="Node belongs to chapter",read=ReadKiryu>;
                        u32 WorkAhead[3]<hidden=true>;
                        local int stayunk=FTell();
                        if(Part6Pointer>0){
                            FSeek(Part6Pointer);
                            struct Part6{
                                u32 UnkPointer1<format=hex,name="Pointer to Function">;
                                u32 Part7Pointer<format=hex,name="Scenario Node IDs Pointer">;
                                u32 Part7Count<name="Scenario Node IDs Count">;
                                u32 Unused<hidden=true>;
                                local int stayz=FTell();
                                if(Part7Pointer>0){
                                    FSeek(Part7Pointer);
                                    local int huh;
                                    for(huh=0;huh<Part7Count;huh++){
                                        u32 Node<name="Scenario Node ID",format=hex>;
                                    };
                                };
                                FSeek(UnkPointer1);
                                char UnkString[]<name="Function Name",comment="[EXCLUSIVE OR] change at your own risk">;
                                FSeek(stayz);
                            }part6<name="Branch Events",read=ReadXOR>;
                        };
                        FSeek(stayunk);
                        ScenarioSum++;
                        local uint ScenarioIndex=ScenarioSum;
                        local uint ScenarioChapIndex=ChapterSum;
                        local char die[]=part6.UnkString;
                        local uint cookie=part6.Node[0];
                        local uint cherry=part6.Node[1];
                        }
                    else if(NodeType==5)
                        {
                            ScenarioSum++;
                            local uint ScenarioIndex=ScenarioSum;
                            local uint ScenarioChapIndex=ChapterSum;
                            int32 P2Pointer<format=hex,name="Scenario Settings Pointer">;
                            FSeek(P2Pointer);
                            struct P2Node{
                                int32 P1Pointer<format=hex,name="Player Settings Pointer">;
                                int32 P1Count<name="Player Settings Versions Count">;
                                local int P1stay=FTell();
                                FSeek(P1Pointer);
                                struct Part1{
                                    local int omg;
                                    for(omg=0;omg<P1Count;omg++){
                                        struct P1Node{
                                            uint32 Game_Mode<name="Game Mode">;
                                            int32 StringPointer<format=hex,name="String Pointer">;
                                            int32 Player_Pos<name="Player Position">;
                                            int32 Unk2;
                                            uint32 ScenarioLength<name="Misc Settings Size">;
                                            int32 ScenarioPointer<format=hex,name="Misc Settings Pointer">;
                                            local int P2stay=FTell();
                                            FSeek(StringPointer);
                                            struct P1String{
                                                char P1NString[]<name="String">;
                                            }p1str<name="String",read=P1NString>;

                                            if (ScenarioLength>0){
                                                FSeek(ScenarioPointer);
                                                struct P1Scen{
                                                    local int u=0;
                                                    Setting(ScenarioPointer,ScenarioLength,u);
                                                }p1scen<read=u,name="Misc Settings">;
                                            }
                                            FSeek(P2stay);
                                        }p1node<read=p1str.P1NString,name="Player Settings">;
                                    }
                                }part1<read=p1node[0].p1str.P1NString,name="Player Settings">;

                                FSeek(P1stay);
                                int32 NodeID<name="Node ID",format=hex>;
                                int32 UnkUnused<hidden=true>;//likely unused. look for an exception.
                                struct ExtraSettings{
                                    local int s;
                                    local int staysettings=FTell();
                                    for(s=0;s<8;s++){
                                        FSeek(staysettings+s*4);
                                        struct ExtraSettingsNode{
                                            u32 Size<name="Extra Settings Size">;
                                            FSkip(28);
                                            u32 Pointer<format=hex,name="Extra Settings Pointer">;
                                            local int u=0;
                                            if(Pointer>0){
                                                FSeek(Pointer);
                                                Setting(Pointer,Size,u);
                                            };
                                            FSeek(staysettings+s*4+4);
                                        }extrasettingsnode<read=u,name="Extra Settings">;
                                    };
                                }extrasettings<name="Extra Settings">;
                                
                            }p2node<name="Scenario Settings">;
                            FSeek(stay4+4);
                            int32 Unused<hidden=true>;
                            struct Follow{
                                int32 FPointer<format=hex>;
                                if(Version==0){
                                    local int RggsWhy = (FPointer - header.Part4Pointer)/48;
                                }
                                else{
                                    local int RggsWhy = (FPointer - header.Part4Pointer)/32;
                                };
                            }follow<name="Follows up to",read=ReadFollow>;
                            struct Child{
                                int32 ParentPointer<format=hex>;
                                if(Version==0){
                                    local int RggsWhy = (ParentPointer - header.Part4Pointer)/48;
                                }
                                else{
                                    local int RggsWhy = (ParentPointer - header.Part4Pointer)/32;
                                }
                            }child<name="Node belongs to chapter",read=ReadChild>;
                            int32 NodeID<name="Node ID",format=hex>;
                            int32 Pointer5<format=hex,name="Node access structure pointer">;
                            int32 Count5<name="Node access structure count">;
                            if(Version==0){
                                int32 Unk[4]<hidden=true>; //likely unused. look for an exception.
                            };
                            local int stay5=FTell();
                            FSeek(Pointer5);
                            if(Count5>0){
                                struct Part5{
                                    local int jeff;
                                    for(jeff=0;jeff<Count5;jeff++){
                                        struct Part5Node{
                                            int32 NodeID<format=hex,name="Node ID">;
                                        }part5node<name="Node can be accessed from",read=NodeID>;
                                    }
                                }part5<read=jeff,name="Node access points">;
                            };
                            FSeek(stay5);
                            local char die[]=p2node.part1.p1node[0].p1str.P1NString;
                         }
                }part4node<name=NameNode,read=ReadNode,comment=CommentNode>;
};
